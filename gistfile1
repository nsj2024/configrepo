minikube start --driver=docker
kubectl apply -f nginx-dep.yaml  or kubectl create -f nginx.yaml
kubectl get deploymentsn / pods
kubectl apply -f nginx-serv.yaml
kubectl get svc -o wide
# not working kubectl expose deployment nginx-svc --type=NodePort --port=8080
kubectl port-forward service/nginx-svc 7080:80
go to browser or curl  localhost:7080 
kubectl exec -it service/nginx-svc -- bash    to enter into the running container on POD to make changes to your index.html 

kubectl scale deployment nginx-deployment --replicas=<replica_count>

kubectl describe nodes <node-name>
kubectl describe pods <pod-name>
kubectl cluster-info


----------------------------------------------------
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  type: NodePort
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80

---------------------------------
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        ports:
        - containerPort: 80

-------------------------------------------------------
https://www.hostinger.com/tutorials/docker-cheat-sheet
file:///D:/dockerjava/docker_cheatsheet.pdf

docker version
docker images
docker ps 
docker ps -a  or --all lists all containers
docker pull nginx:1.23
docker run nginx:1.23   blocks terminal
docker -d or --detach nginx:1.23
docker logs <containerid>
docker stop <containerid>

docker build -t node-app:1.0 .   to create an image 

docker run -ti --rm <container-id> bash
docker exec -it [container-id] bash         to enter a running container

docker run -d --publish 9000:80 
 
docker run -d --publish 9000:80 nginx:1.23
or
docker run -d -p 9000:80 nginx:1.23

docker run --name web-app -d -p 9000:80 nginx:1.23

---------------------------------------
docker tag hello-app:latest anilboppuri/dockerhub:hello-app
docker push anilboppuri/dockerhub:hello-app

--------------------------------------------------------


-----------------------------------------------------------------------------

resilience4j:

  circuitbreaker:
    instances:
      clientService:
       registerHealthIndicator: true
       eventConsumerBufferSize: 10
       automaticTransitionFromOpenToHalfOpenEnabled: true
       failureRateThreshold: 50
       minimumNumberOfCalls: 5
       permittedNumberOfCallsInHalfOpenState: 3
       slidingWindowSize: 10
       waitDurationInOpenState: 5s
       slidingWindowType: COUNT_BASED

spring:
  application:
    name: helloservres4jclient
server:
   port: 8095    
   
management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
   health:
     show-details: always
               
  
   
    

       
                
      


---------------------------------------------------------------------------------------------------
pipeline {
    agent any

    tools {
        jdk 'JDK8'
        // Install the Maven version configured as "M3" and add it to the path.
        maven "apache-maven-3.9.6-bin"
    }

    stages {
        stage('Build') {
            steps {
                // Get some code from a GitHub repository
                git 'https://github.com/jglick/simple-maven-project-with-tests.git'

                // Run Maven on a Unix agent.
                // "mvn -Dmaven.test.failure.ignore=true clean package"

                // To run Maven on a Windows agent, use
                 bat "mvn -Dmaven.test.failure.ignore=true clean package"
            }

            post {
                // If Maven was able to run the tests, even if some of the test
                // failed, record the test results and archive the jar file.
                success {
                   
                    junit allowEmptyResults: true, skipPublishingChecks: true, testResults: '**/target/surefire-reports/TEST-*.xml'
                       archiveArtifacts 'target/*.jar'
                }
            }
        }
    }













--------------------------------------------------
pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                echo 'Building..'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}
